y <- c(6,7,8,9,10)
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)
plot(x,y)
plot(x,y, type=b])
plot(x,y, type=b)
plot(x,y,type=b)
plot(x,y,type='b')
setwd("~/")
?install.packages
??(install)
install.packages('nycflights13')
library(nycflights13)
hist(flights$distance)
plot(cars)
plot(cars)
head(cars)
1+1
x <- 10
hello <- c('Hello', "World")
y <- c(1,2,3,4,5)
z <- seq(from =1, to =5, by =1)
mean(x=z)
mean(z)
?seq
library("stats")
library(help='stats')
sample(1:6,1)
plot(probability, main = 'Probability Distribution', xlab='outcomes')
library("stats")
sample(1:6,1)
probability <- rep(1/6,6)
plot(probability, main = 'Probability Distribution', xlab='outcomes')
cum_probability <-cumsum(probability)
plot(cum_probability, xlab = 'outcomes', main = "Cumulative Probability Distribution")
sample(c("H","T"), 2)
sample(c("H","T"), 3)
sample(c("H","T"), 1)
dbinom(x=5,size=1-, prob= 0.5)
dbinom(x=5,size=10, prob= 0.5)
sum(binom(x=4:7, size=10,prob=0.5))
sum(dbinom(x=4:7, size=10,prob=0.5))
pbinom(size=10,prob=0.5, q=7) -pbinom(size=10,prob=0.5, q=3)
probability <- dbinom(x=k,size=10,prob=0.5)
k <- 0:10
probability <- dbinom(x=k,size=10,prob=0.5)
probability <- dbinom(x=k,size=10,prob=0.5)
probability <- dbinom(x=k,size=10,prob=0.5)
probability <- dbinom(x=k,size=10,prob=0.5)
probability <- dbinom(x=k,size=10,prob=0.5)
mean(m)
m <- (1:20)
mean(m)
plot(x=k, y=probability, main="Probability Distribution Function")
?pbinom
plot(x=k, y=probability, main="Probability Distribution Function")
prob <- pbinom(q=k, size = 10, prob = 0.5)
plot(k=k, y=prob, main = "CDF")
plot(x=k, y=prob, main = "CDF")
mean(1:6)
?set.seed
set.seed(1)
sample(1:6, 3)
?sample
sample(1:6,5,replace=FALSE)
sample(1:6,5,replace=TRUE)
set.seed(1)
sample(1:6, 10000, replace=T)
mean(sample(1:6,10, replace=T))
mean(sample(1:6,100, replace=T))
mean(sample(1:6,1000, replace=T))
mean(sample(1:6,10000, replace=T))
mean(sample(1:6,100000, replace=T))
var(1:6)
f <-fuction(x) 3/x^4
f <- function(x) 3/x^4
plot(f)
g <- function(x) x *f(x)
plot(g)
h <- fuction(x) x^2 * f(x)
h <- function(x) x^2 * f(x)
plot(h)
plot(f,g,h)
?plot
plot(f,g,h)
plot(f,g,h, from = 0, to = 100)
area <- integrate(f, lower=1, upper=Inf)$value
area
X <- integrate(g, lower=1, upper=Inf)$value
X
?sample
?integrate
?$value
?integrate
?ex
# define the function ex
ex <- function(x){x*f(x)}
# define the function ex
f(x) <- x/4*exp(-x^2/8)
# define the function ex
fx <- x/4*exp(-x^2/8)
# define the function ex
f <- function(x)x/4*exp(-x^2/8)
ex <- function(x){x*f}
# compute the expected value of X
expected_value <- integrate(ex,0,Inf)$value
ex <- function(x){x*f(x)}
# compute the expected value of X
expected_value <- integrate(ex,0,Inf)$value
# define the function ex2
ex2 <- function(x){x^2*f(x)}
# compute the variance of X
variance <- ex2 - expected_value^2
?variance
?var
library(tidyverse)
install.packages("tidyverse")
livrary(tidyverse)
library(tidyverse)
head(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = <DATA>) +
<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
ggplot(data=mpg)
print(drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
8+13
ages <- c(53,20,39,27,18)
mean(ages)
sum(ages)/length(ages)
2+3
mean
fooages <- c(53,20,39,27,18)
foo
class(ages)
?mean
mean(ages,trim=0.2)
seq(1,100)
seq(1,100, by =10)
seq(1,100, by =9)
?seq
seq(1,100, by =10)
seq(1,100, by =11)
seq(1,100, by =9.9)
seq(1,100, by =9.9)
seq(1,100, by =11)
seq(10,100, by =10)
seq(0,1, length.out = 10)
seq(0,1, by = 10, length.out = NULL)
seq(0,1, by = (1/9), length.out = NULL)
seq(0,1, length.out = 11)
getwd()
#import jmen data
read.table("jmen.txt")
?read.table
?seq
?read.table
#import jmen data
read.table("jmen.txt", header=TRUE)
#import jmen data
read.table("jmen.txt", header=TRUE)
#import jmen data
read.table("jmen.txt", header=TRUE)
#import jmen data
jmen<- read.table("jmen.txt", header=TRUE)
class(jmen)
jmen[5,2]
jmen
class(jmen)
jmen(c(3,7),c(2,4))
jmen[c(3,7,c(2,4))]
jmen[c(3,7),c(2,4)]
jmen[ ,4]
View(jmen)
jmen[c(2,4,6),c(2,3)]
subset(jmen,jmen$Hair=="Red")
subset(jmen, jmen$Hair != "Red")
subset(jmen, jmen$Hair == "Black" | jmen$Eyes == "Brown")
subset(jmen, jmen$Hair == "Brown" | jmen$Eyes == "Brown")
subsetsubset()
plot(jmen$Eyes)
plot(jmen$Eyes)
plot(jmen$Age)
plot(sort(jmen$Age))
plot(jmen$Hair,jmen$Eyes)
plot(jmen$Eyes,jmen$Hair)
plot(jmen$Hair,jmen$Eyes)
plot(jmen$Hair,jmen$Age)
?barplot
#create table of number of people with each eye color
eye_table <- taqble(jmen$Eyes)
#create table of number of people with each eye color
eye_table <- taqble(jmen$Eyes)
#create table of number of people with each eye color
eye_table <- table(jmen$Eyes)
barplot(eye_tabel)
barplot(eye_table)
colors()
#barplot of hair color
hair_table <- table(jmen$Hair)
hair_table
barplot(hair_table)
barplot(hair_table, col=c("Black","Yellow","Brown","Red"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
barplot(hair_table, col=c("Black","Yellow1","Brown","Red"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
barplot(hair_table, col=c("Black","Yellow2","Brown","Red"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
barplot(hair_table, col=c("Black","Yellow2","Brown","Red"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
barplot(hair_table, col=c("Black","Yellow2","chocolate","coral1"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
barplot(hair_table, col=c("Black","Yellow2","chocolate4","coral1"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
barplot(hair_table, col=c("Black","khaki1","chocolate4","coral1"), main = "Hair Color of Sampled JMen", xlab = "Hair Colors", ylab="Number of Men", names.arg = c("Black","Blond(e)", "Brown","Red"))
install.packages("rmarkdown")
## Target Graph
![Target Graph](01target.png)
## Target Graph
![Target Graph](01target.png)
## Target Graph
!Target Graph(01target.png)
setwd("~/Desktop/2019-2020/Data Vis/lab 04")
shiny::runApp('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/4899918F-A122-4A64-B738-864FC471E53D')
runApp()
runApp('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/4899918F-A122-4A64-B738-864FC471E53D')
runApp('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/96FBD0A3-923D-44B6-A0D4-39E923039042')
setwd("~/Desktop/2019-2020/Data Vis/lab 04")
runApp('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/96FBD0A3-923D-44B6-A0D4-39E923039042')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/2019-2020/Data Vis/lab 04")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_color_gradient
runApp()
runApp()
runApp()
